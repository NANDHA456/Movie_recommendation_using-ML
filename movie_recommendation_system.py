# -*- coding: utf-8 -*-
"""MOVIE Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CseZCJ13cgXAxhC1mk2CbHjXcpVoZS2v

IMPORTING THE DEPENDANCIES
"""

import numpy as np
import pandas as pd
import difflib #to close match the user imput when they type wrong
from sklearn.feature_extraction.text import TfidfVectorizer # raw text into numbers
from sklearn.metrics.pairwise import cosine_similarity#pairwise metric is a function that measures how similar or different two things are â€” typically between two vectors, data points, or text samples.

"""DATA COLLECTION AND PRE PROCESSING"""

movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

movies_data.shape

#Selecting the relavent features for the recommendation
selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

#to assign null which the text not exist
for feature in selected_features:
  movies_data[feature]=movies_data[feature].fillna('')

combine_feature=movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']
print(combine_feature)

"""CONVERT THE TEXT INTO VECTOR"""

vectorize=TfidfVectorizer()
feature_vector=vectorize.fit_transform(combine_feature)
print(feature_vector)

"""COSINE SIMILARITY"""

similarity=cosine_similarity(feature_vector)
print(similarity)

similarity.shape

#get the movie name from the user
movie_name=input('enter your favourite movie name:')

#create the list of all the movie name
list_of_all_title=movies_data['title'].tolist()
print(list_of_all_title)

#if the name wrong find the close
find_close_match=difflib.get_close_matches(movie_name,list_of_all_title)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies
simularity_score=list(enumerate(similarity[index_of_the_movie]))
print(simularity_score)

len(simularity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(simularity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

#print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

"""MOVIE RECOMMENDED SYSTEM"""

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1